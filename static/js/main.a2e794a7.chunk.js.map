{"version":3,"sources":["models/Person.js","store/actions.js","store/reducers.js","components/UICard.js","components/AddPersonForm.js","components/PersonDisplay.js","components/CheckSavingsForm.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Person","name","age","savings","this","setName","value","getName","setAge","getAge","givePaycheck","hasEnoughSavings","setQuery","query","type","initialState","people","rootReducer","state","action","concat","person","Card","props","className","children","AddPersonForm","useState","dispatch","useDispatch","handleInputChange","event","target","onChange","onClick","newPerson","addPerson","disabled","DisplayPerson","useSelector","savingsMessage","setSavingsMessage","paycheckMessage","setPaycheckMessage","paycheckCount","setPaycheckCount","isRed","setIsRed","useEffect","result","CheckSavingsForm","queryInput","setQueryInput","MainPage","length","map","index","key","store","createStore","reducers","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2e794a7.chunk.js","sourcesContent":["class Person {\r\n  constructor() {\r\n    let name = \"\";\r\n    let age = \"\";\r\n    let savings = 0;\r\n    this.setName = (value) => {\r\n      name = value;\r\n    };\r\n    this.getName = () => {\r\n      return name;\r\n    };\r\n    this.setAge = (value) => {\r\n      age = value;\r\n    };\r\n    this.getAge = () => {\r\n      return age;\r\n    };\r\n    this.givePaycheck = () => {\r\n      savings += 100;\r\n    };\r\n    this.hasEnoughSavings = (value) => {\r\n      return savings >= value;\r\n    };\r\n  }\r\n  /* alternative way of writing getters and setters - but the properties are not private\r\n  constructor() {\r\n    this.name = \"\";\r\n  }\r\n\r\n  get getName() {\r\n    return this.name;\r\n  }\r\n  set setName(name) {\r\n    this.name = name;\r\n  }\r\n*/\r\n}\r\n\r\nexport default Person;\r\n","import Person from \"../models/Person\";\r\n\r\nexport const ADD_PERSON = \"ADD_PERSON\";\r\nexport const SET_QUERY = \"SET_QUERY\";\r\n\r\nexport const addPerson = (name, age) => {\r\n  const newPerson = new Person();\r\n  newPerson.setName(name);\r\n  newPerson.setAge(age);\r\n  return { type: ADD_PERSON, person: newPerson };\r\n};\r\n\r\nexport const setQuery = (query) => ({ type: SET_QUERY, query: query });\r\n","import { SET_QUERY, ADD_PERSON } from \"./actions\";\r\n\r\nconst initialState = {\r\n  query: \"\",\r\n  people: [],\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_QUERY:\r\n      return { ...state, query: action.query };\r\n    case ADD_PERSON:\r\n      return { ...state, people: state.people.concat(action.person) };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport \"./UICard.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"Card\" {...props}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Card from \"./UICard\";\r\nimport { addPerson } from \"../store/actions\";\r\nimport \"./Form.css\";\r\n\r\nconst AddPersonForm = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleInputChange = (event) => {\r\n    switch (event.target.name) {\r\n      case \"name\":\r\n        setName(event.target.value);\r\n        break;\r\n      case \"age\":\r\n        setAge(event.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(addPerson(name, age));\r\n    setName(\"\");\r\n    setAge(\"\");\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <form className=\"Form\">\r\n        <label className=\"Label\">\r\n          Name\r\n          <input\r\n            className=\"Input\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n        <label className=\"Label\">\r\n          Age\r\n          <input\r\n            className=\"Input\"\r\n            name=\"age\"\r\n            type=\"number\"\r\n            value={age}\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n        <button\r\n          className=\"Button\"\r\n          type=\"button\"\r\n          onClick={handleSubmit}\r\n          disabled={!name || !age}\r\n        >\r\n          Add a new person\r\n        </button>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddPersonForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Card from \"./UICard\";\r\nimport \"./PersonDisplay.css\";\r\n\r\nconst DisplayPerson = (props) => {\r\n  const { person } = props;\r\n  const query = useSelector((state) => state.query);\r\n\r\n  const [savingsMessage, setSavingsMessage] = useState(\"\");\r\n  const [paycheckMessage, setPaycheckMessage] = useState(\"\");\r\n\r\n  const [paycheckCount, setPaycheckCount] = useState(0);\r\n  const [isRed, setIsRed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      const result = person.hasEnoughSavings(query);\r\n      setIsRed(!result);\r\n      result\r\n        ? setSavingsMessage(`${person.getName()} has enough savings`)\r\n        : setSavingsMessage(`${person.getName()} does not have enough savings`);\r\n    }\r\n  }, [query, person, paycheckCount]);\r\n\r\n  const givePaycheck = () => {\r\n    person.givePaycheck();\r\n    setIsRed(false);\r\n    setPaycheckCount(paycheckCount + 1);\r\n    paycheckCount > 0\r\n      ? setPaycheckMessage(`${paycheckCount + 1} paychecks have been given.`)\r\n      : setPaycheckMessage(\"Paycheck has been given.\");\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <div className=\"Row\">\r\n        <p>\r\n          {person.getName()} ({person.getAge()})\r\n        </p>\r\n        {query && savingsMessage && (\r\n          <p className={isRed ? \"Red\" : \"Green\"}>{savingsMessage}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"Row\">\r\n        <button className=\"Button\" type=\"button\" onClick={givePaycheck}>\r\n          Give Paycheck\r\n        </button>\r\n        {paycheckMessage && <p>{paycheckMessage}</p>}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DisplayPerson;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setQuery } from \"../store/actions\";\r\nimport Card from \"./UICard\";\r\nimport \"./Form.css\";\r\n\r\nconst CheckSavingsForm = () => {\r\n  const [queryInput, setQueryInput] = useState(\"\");\r\n  const query = useSelector((state) => state.query);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleQueryChange = (event) => {\r\n    dispatch(setQuery(\"\"));\r\n    setQueryInput(event.target.value);\r\n  };\r\n\r\n  const handleCheckQuery = () => {\r\n    dispatch(setQuery(queryInput));\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <label className=\"Label\">\r\n        Amount\r\n        <input\r\n          className=\"Input\"\r\n          name=\"query\"\r\n          type=\"number\"\r\n          value={queryInput}\r\n          onChange={handleQueryChange}\r\n        />\r\n      </label>\r\n      <button\r\n        className=\"Button\"\r\n        type=\"button\"\r\n        onClick={handleCheckQuery}\r\n        disabled={!queryInput || query}\r\n      >\r\n        Check Savings\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CheckSavingsForm;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport AddPersonForm from \"./AddPersonForm\";\r\nimport DisplayPerson from \"./PersonDisplay\";\r\nimport CheckSavingsForm from \"./CheckSavingsForm\";\r\n\r\nconst MainPage = () => {\r\n  const people = useSelector((state) => state.people);\r\n\r\n  return (\r\n    <div className=\"AppScreen\">\r\n      <h4>Add a new person:</h4>\r\n      <AddPersonForm />\r\n      {people.length > 0 ? (\r\n        <>\r\n          <CheckSavingsForm />\r\n          <h4>Manage people:</h4>\r\n          {people.map((person, index) => (\r\n            <DisplayPerson\r\n              person={person}\r\n              key={`${person.getName()}${index}`}\r\n            />\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <h4>Please add a new person!</h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport reducers from \"./store/reducers\";\n\nimport MainPage from \"./components/MainPage\";\nimport \"./App.css\";\n\nconst store = createStore(reducers);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainPage />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}